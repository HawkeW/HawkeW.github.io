I"	 <p>前段时间是一直看着廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">JavaScript教程</a>在学习，看到浏览器部分就开始有点力不从心了，接着是一段换工作之旅，折腾到现在都有点飘飘然不知道从何下手。于是又从浏览器开始看，终于看到了<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544"><code class="highlighter-rouge">Promise</code></a>这里。</p>

<p>干看下来有点不知所以，就来敲点字，查查资料啦。</p>

<p>在看教程的过程中，主要不理解的点主要集中在：</p>

<ul>
  <li>没有理解<code class="highlighter-rouge">promise</code>对象的执行过程</li>
  <li>不知道<code class="highlighter-rouge">resolve</code>函数和<code class="highlighter-rouge">reject</code>函数是什么</li>
  <li><code class="highlighter-rouge">job1.then(job2).then(job3).catch(handleError);</code>这段代码懵逼了……</li>
  <li><code class="highlighter-rouge">async</code>？？？</li>
</ul>

<p>于是在一番愉快(….)的探索之后，来到阮老师的<a href="http://es6.ruanyifeng.com/">ES6入门</a>，内容更多更细致一点，便于理解代码。</p>

<p>所以以下主要是是阮老师ES6入门的<code class="highlighter-rouge">Promise</code>的学习笔记了。</p>

<h2 id="定义">定义</h2>

<p><code class="highlighter-rouge">Promise</code> 是异步编程的一种解决方案，ES6将其写进了语言标准，原生提供了Promise对象。</p>

<h3 id="一个实例">一个实例</h3>

<p>ES6 规定，<code class="highlighter-rouge">Promise</code>对象是一个构造函数，用来生成一个<code class="highlighter-rouge">Promise</code>实例。</p>

<p>下面代码创造了一个<code class="highlighter-rouge">Promise</code>实例。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const promise = new Promise(function(resolve, reject) {
  // ... some code

  if (/* 异步操作成功 */){
    resolve(value);
  } else {
    reject(error);
  }
});
</code></pre></div></div>

<h3 id="两个基本函数">两个基本函数</h3>

<p>JavaScript引擎对<code class="highlighter-rouge">Promise</code>对象提供了两个函数作为参数，函数执行时会修改<code class="highlighter-rouge">Promise</code>对象的<strong>状态</strong>，并传递一个对应的参数。</p>

<ul>
  <li><code class="highlighter-rouge">resolve(value)</code>，可在异步操作成功执行时调用，将<code class="highlighter-rouge">value</code>值传递出去。</li>
  <li><code class="highlighter-rouge">reject(error)</code>，可在异步操作失败时调用，将<code class="highlighter-rouge">error</code>值传递出去。</li>
</ul>

<h3 id="三个状态">三个状态</h3>

<p>一个<code class="highlighter-rouge">Promise</code>有以下三种状态——</p>

<ul>
  <li><code class="highlighter-rouge">pending </code>：在<code class="highlighter-rouge">Promise</code>对象被创建时产生的状态，表示进行中</li>
  <li><code class="highlighter-rouge">fulfilled </code>：异步操作执行成功后，<code class="highlighter-rouge">resolve</code>函数会将<code class="highlighter-rouge">Promise</code>状态改变为<code class="highlighter-rouge">fulfilled</code>，表示执行成功</li>
  <li><code class="highlighter-rouge">rejected</code>：异步操作执行失败时，<code class="highlighter-rouge">reject</code>函数会将<code class="highlighter-rouge">Promise</code>状态改变为<code class="highlighter-rouge">rejected</code>，表示执行失败。</li>
</ul>

<h2 id="promise的基本使用">Promise的基本使用</h2>

<p>一个<code class="highlighter-rouge">Promise</code>实例生成后，可以用它的<code class="highlighter-rouge">then</code>方法来指定回调函数（调用<code class="highlighter-rouge">value</code>/<code class="highlighter-rouge">error</code>）。</p>

<ul>
  <li>使用<code class="highlighter-rouge">then</code></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>promise.then(function(value) {
  // success
}, function(error) {
  // failure
});
</code></pre></div></div>

<ul>
  <li>使用<code class="highlighter-rouge">then</code>和<code class="highlighter-rouge">catch</code></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>promise.then(function(value) {
  // success
}.catch(function(error) {
  // failure
});
</code></pre></div></div>

<h2 id="n个方法">n个方法</h2>

<p><code class="highlighter-rouge">Promise</code>的原型包含很多个方法，这里就暂时不再深挖，上述的基本使用应该就满足了目前的学习了（吧？）。</p>

<p>下面罗列一下<code class="highlighter-rouge">Promise</code>的其他方法，后续拿来继续学习。</p>

<ul>
  <li><code class="highlighter-rouge">Promise.prototype.then()</code>。可以接收两个回调函数作为参数，第一个为成功（resolve）时的 <code class="highlighter-rouge">value</code> 参数，第二个为失败（reject）时<code class="highlighter-rouge">error</code>参数。</li>
  <li><code class="highlighter-rouge">Promise.prototype.catch</code>。 <code class="highlighter-rouge">then(null, rejection)</code>或<code class="highlighter-rouge">.then(undefined, rejection)</code> 的别名，在<code class="highlighter-rouge">Promise</code>对象执行失败（reject）时调用</li>
  <li><code class="highlighter-rouge">Promise.prototype.finally()</code>。不管<code class="highlighter-rouge">Promise</code>对象的状态如何，都会执行的操作。是<code class="highlighter-rouge">then</code>的一个特例。</li>
  <li><code class="highlighter-rouge">Promise.all() </code>。包装多个<code class="highlighter-rouge">Promise</code> a,b,c。所有任务都<code class="highlighter-rouge">resolve</code>，新的实例才会<code class="highlighter-rouge">resolve</code>。相当于逻辑<code class="highlighter-rouge">与</code>/<code class="highlighter-rouge">&amp;&amp;</code>。</li>
  <li><code class="highlighter-rouge">Promise.race()</code>。包装多个<code class="highlighter-rouge">Promise</code>。其中一个过程执行完即返回结果，不管失败或成功，在应用中会使程序更有容错性。</li>
  <li><code class="highlighter-rouge">Promise.allSettled() </code>。包装多个<code class="highlighter-rouge">Promise</code>，所有<code class="highlighter-rouge">Promise</code>执行完毕后，状态都为<code class="highlighter-rouge">fulfilled</code>，同时返回一个<code class="highlighter-rouge">value</code>值，类型为数组。数组中每一个值为一个对象，包含各个实例的<code class="highlighter-rouge">status</code>和<code class="highlighter-rouge">value</code>/<code class="highlighter-rouge">reason</code>属性对应值。可以用来监听各个实例的当前执行情况。</li>
  <li><code class="highlighter-rouge"> Promise.any()</code>。包装多个<code class="highlighter-rouge">Promise</code>。相当于逻辑<code class="highlighter-rouge">或</code>/<code class="highlighter-rouge">||</code></li>
  <li><code class="highlighter-rouge">Promise.try()</code>。与catch方法类似，是模拟<code class="highlighter-rouge">try</code>方法开发的</li>
  <li><code class="highlighter-rouge">Promise.resolve()</code>。将参数对象转化为<code class="highlighter-rouge">Promise</code>对象。</li>
  <li><code class="highlighter-rouge">Promise.reject()</code>。创建一个<code class="highlighter-rouge">Promise</code>对象，其状态(status)为<code class="highlighter-rouge">rejected</code>，<code class="highlighter-rouge">reason</code>值为参数值。</li>
</ul>

<h2 id="问题">问题</h2>

<p>其实到这里，还是存在一些问题的。</p>

<ul>
  <li>异步和同步理解的还不够深入</li>
  <li><code class="highlighter-rouge">Promise</code>要拿来实际应用才行。</li>
</ul>

<h2 id="参考文献">参考文献</h2>

<ul>
  <li><a href="http://es6.ruanyifeng.com/">《ECMAScript 6 入门》 作者：阮一峰</a></li>
</ul>
:ET